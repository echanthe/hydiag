% Main part of the GUI
function GUI_main_window(param)
    global conf
    global is_launched
    global results
    persistent f

    if nargin == 0
        param = 'init';
    end

    
    switch param
        case 'init' 
            if ~isempty(f) %| is_launched == 1
                fprintf(2, 'Error: Software already launched ! Please close all instances.');
                fprintf('\n');
                return
            end

            fprintf('Launching software ...');
            is_launched = 1;
            
            results = {};
            results.mark=-1;
            
            %Datas to save from simulink 'To Workspace'
            results.self = {
                {'__separator__' '-- Simulator : --'} ...
                {'t' 'Simulation time'} ...
                {'U' 'Continuous input(s)'} ...
                {'Y' 'Continuous output(s)'} ...
                {'events' 'Observables and unobservables discretes events'} ...
                {'events_obs' 'Observables discretes events'} ...
                {'real_state' 'Real state of the automaton'} ...
                {'__separator__' '-- Diagnoser : --'} ...
                {'belief_state' 'Belief state in output of the diagnoser' } ...
                {'residual_norm' 'Norm 1 of residuals'} ...
                {'residual_event' 'Events generated from residuals changes' } ...
                {'__separator__' '-- Prognoser : --'} ...
                {'Ages' 'Faults ages' } ...
                {'FaultsMaxDates' 'Faults series prognosis' } ...
                {'RUL' 'RUL (or date of the last fault if failure is not accesible)' } ...
                };
           
            % Global parameters
            conf = struct(...
                'X_SIZE', {800}, ...
                'Y_SIZE', {640}, ...
                'X_POPUP_SIZE', {550},...
                'Y_POPUP_SIZE', {500}, ...
                'LEFT_MENU', {150}, ...
                'HEADER', {64}, ...
                'MARGIN', {5}, ...
                'X_BTN_SIZE', {125}, ...
                'Y_BTN_SIZE', {25},...
                'BG_COLOR', {[0.8 0.9 0.8]}, ...
                'BG_COLOR_INPUT', {[1 1 1]}, ...
                'BG_COLOR_BIS', {[0.1 0.7 0.4]}, ...
                'BG_COLOR_LABEL', {[0.85 0.98 0.85]}, ...
                'FG_COLOR', {[0 0 0]}, ...
                'FG_COLOR_BIS', {[1 1 1]}, ...
                'FG_COLOR_INPUT', {[0 0 0]}, ...
                'FG_COLOR_LABEL', {[0 0 0]} ...
                );
            
            % the main window
            f = figure( 'Visible','off','NumberTitle','off','Position',[1 1 conf.X_SIZE conf.Y_SIZE], ...
                        'Resize','off','Color',conf.BG_COLOR, ...
                        'Name','Hybrid MultiMode system Simulator');
             set(f,'NextPlot','new')
             set(f,'CloseRequestFcn',@close_HYDIAG)
            % Header
            uicontrol( 'Parent', f, 'Style','text', ...
                       'Position', [...
                                conf.MARGIN,...
                                conf.Y_SIZE-conf.MARGIN-conf.HEADER,...
                                conf.X_SIZE-2*conf.MARGIN,...
                                conf.HEADER ], ...
                       'BackgroundColor',conf.BG_COLOR_BIS, ...
                       'ForegroundColor',conf.FG_COLOR_BIS, ...
                       'String','');
                   
             uicontrol(f,'Style','text', ...
                'Position',[conf.LEFT_MENU conf.Y_SIZE-conf.HEADER*3/4 (conf.X_SIZE-conf.LEFT_MENU-2*conf.MARGIN) 20],...
                'String','Hybrid multimode system Simulator & Diagnoser',...
                'FontSize', 12, ...
                'FontWeight', 'bold', ...
                'BackgroundColor',conf.BG_COLOR_BIS, ...
                'ForegroundColor',conf.FG_COLOR_BIS, ...
                'Parent',f);
            
             uicontrol(f,'Style', 'pushbutton','Units','pixels', ...
                'Position',[conf.MARGIN conf.Y_SIZE-conf.HEADER-conf.MARGIN 207 64], ...
                'String',' ', ...
                'CDATA', imread('logo-laas.png'), ...
                'Callback', {@mw_Callback_logo}, ...
                'Parent',f);
      
            
%            parameters
            
            % TODO: d√©bugger fenetre infermable parfois
            %set(f,'CloseRequestFcn','GUI_main_window(''quit'')') % intercept close btn
 
            GUI_left_frame('init', f);
            GUI_right_frame('init', f);
            %Diagnoser('init'); % NO ! the diagnoser must be initialized
            % when SysHybride is defined and all modes are set.
            
%             %% AUTO LOADING EXAMPLE
%             SysHybride('init', 'load_file', 'default_system_new.mat');
%             GUI_left_frame('update_btn');
%             GUI_left_frame('set_info', '', 1);
%             %%end        
            
            movegui(f,'center')
            % Once everything as been setup, we can display the window
            set(f,'Visible','on');
            fprintf('\n');
            
        case 'quit'
%             switch questdlg('Quit the simulator ?', 'Close ?','Yes', 'No', 'No') 
%                 case 'Yes'
                    % User asked to leave now
                    % TODO: check for unsaved data
                    delete(f);
                    clear f
                    clear global is_launched;
%             end
            
    end
    
    
function close_HYDIAG(src,evnt)
% User-defined close request function 
% to display a question dialog box 
   selection = questdlg('Close HYDIAG?',...
      'HYDIAG Diagnoser',...
      'Yes','No','Yes'); 
   switch selection, 
      case 'Yes',
         delete(gcf)
      case 'No'
      return 
   end
    